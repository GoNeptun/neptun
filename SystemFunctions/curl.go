// Copyright 2019 Alexey Yanchenko <mail@yanchenko.me>
//
// This file is part of the Neptun library.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package systemfunctions

import (
	"crypto/tls"
	"net/http"
	"strings"
)

func SysCurl(method string, curldata [][]string) {

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// TODO: This is insecure; use only in dev environments.
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}

	var strs []string
	for _, v1 := range curldata {
		s := strings.Join(v1, "=")
		strs = append(strs, s)

	}

	curldataString := strings.Join(strs, "&")
	fullcurldataString := "method=" + method + "&" + curldataString

	body := strings.NewReader(fullcurldataString)
	req, err := http.NewRequest("POST", "http://localhost:8090/sysapi/", body)
	if err != nil {
		// handle err
		SetErrorLog(err.Error())
	}
	req.Header.Set("Key", "123")
	req.Header.Set("Sign", "345")
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	client.Do(req)
	/*
	   resp, err := client.Do(req)
	   if err != nil {
	   	// handle err
	   }
	   defer resp.Body.Close()
	   fmt.Printf("SysCurl WellDone \n")
	*/
}
